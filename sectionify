#!/usr/bin/env node
// Copyright (c) 2010-2012 Robert Kieffer

var fs = require('fs');

function Source(path) {
  this.path = path;
  this._parse();
}

Source.prototype._parse = function() {
  this.lines = fs.readFileSync(this.path, 'utf8').split('\n');
  this.sections = {};

  this.lines = this.lines.map(function(line, lineno) {
    if (/^\s*\/\/SECTION/.test(line)) {
      var fields = line.split(/\W+/);
      var name = fields[2];
      var section = {
        name: name,
        line: lineno,
        requires: fields[3] == 'REQUIRES' ? fields.slice(4) : []
      };
      if (name) {
        this.sections[name] = section;
      }
      return section;
    }

    return line;
  }.bind(this));
};

Source.prototype.resolve = function(requires) {
  for (var i = 0; i < requires.length; i++) {
    var section = this.sections[requires[i]];
    if (section && section.name && section.requires) {
      section.requires.forEach(function(sectionName) {
        if (requires.indexOf(sectionName) < 0) {
          requires.push(sectionName);
        }
      });
    }
  }

  return requires;
};

Source.prototype.toString = function(sections) {
  sections = sections || [];

  var include = true;
  return this.lines.filter(function(line, lineno) {
    if (typeof(line) !== 'string') {
      include = ~sections.indexOf(line.name) || (!line.name);
      return false;
    }
    return include;
  }).join('\n');
};

// main
var input = process.argv[2];
var requires = process.argv.slice(3);
var output = process.stdout;

var source = new Source(input);
var sections = source.resolve(requires);
output.write(source.toString(sections));
